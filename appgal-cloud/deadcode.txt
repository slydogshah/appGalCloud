style="background-image: url('images/background/bg5.png'),url('images/background/bg6.png'), var(--gradient-sec);"
className="c-app c-default-layout flex-row align-items-center"


import React from "react";
import PropTypes from "prop-types";
import classnames from "classnames";
// @material-ui/core components
import { makeStyles } from "@material-ui/core/styles";
import Checkbox from "@material-ui/core/Checkbox";
import Tooltip from "@material-ui/core/Tooltip";
import IconButton from "@material-ui/core/IconButton";
import Table from "@material-ui/core/Table";
import TableRow from "@material-ui/core/TableRow";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
// @material-ui/icons
import Edit from "@material-ui/icons/Edit";
import Close from "@material-ui/icons/Close";
import Check from "@material-ui/icons/Check";
// core components
import styles from "../../assets/jss/material-dashboard-react/components/tasksStyle.js";
import {
  CCardGroup,
  CCardFooter,
  CCol,
  CLink,
  CRow,
  CWidgetProgress,
  CWidgetIcon,
  CWidgetProgressIcon,
  CWidgetSimple,
  CWidgetBrand,
  CHeaderNavLink,
  CProgress,
  CNav,
  CNavLink,
  CWidgetDropdown,
  CDropdown,
  CDropdownMenu,
  CDropdownToggle,
  CDropdownItem,
  CAlert,
  CModal,
  CModalHeader,
  CModalTitle,
  CModalBody,
  CCard,
  CCardHeader,
  CCardBody,
  CFormGroup,
  CLabel,
  CInput,
  CSelect,
  CModalFooter,
  CButton,
  CBadge,
  CButtonGroup,
  CCallout
} from '@coreui/react'

import ReactDOM from 'react-dom';
import axios from 'axios'
import { AppContext,store} from "../../application/AppContext"

const useStyles = makeStyles(styles);



//export default function Tasks(props) {
class Tasks extends React.Component
{
  constructor(props)
  {
          super(props);

          const classes = useStyles();
            const [checked, setChecked] = React.useState([...props.checkedIndexes]);
            const handleToggle = value => {
              const currentIndex = checked.indexOf(value);
              const newChecked = [...checked];
              if (currentIndex === -1) {
                newChecked.push(value);
              } else {
                newChecked.splice(currentIndex, 1);
              }
              setChecked(newChecked);
            };
            const { tasksIndexes, tasks, rtlActive, actions } = props;
            const tableCellClasses = classnames(classes.tableCell, {
              [classes.tableCellRTL]: rtlActive
            });

          //console.log("State: "+JSON.stringify(this.props.location.state.data));
          this.handlePickupProcess = this.handlePickupProcess.bind(this);
          this.handlePickup = this.handlePickup.bind(this);
  }

  render(){
        return (
            <Table className={classes.table}>
              <TableBody>
                {tasksIndexes.map(value => (
                  <TableRow key={value} className={classes.tableRow}>
                    <TableCell className={tableCellClasses}>{tasks[value]}</TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                                <TableCell className={tableCellClasses}><div/></TableCell>
                                <TableCell className={tableCellClasses}><div/></TableCell>
                                <TableCell className={tableCellClasses}><div/></TableCell>
                                <TableCell className={tableCellClasses}><div/></TableCell>
                                            <TableCell className={tableCellClasses}><div/></TableCell>
                                            <TableCell className={tableCellClasses}><div/></TableCell>
                                            <TableCell className={tableCellClasses}><div/></TableCell>
                                            <TableCell className={tableCellClasses}><div/></TableCell>
                                                        <TableCell className={tableCellClasses}><div/></TableCell>
                                                        <TableCell className={tableCellClasses}><div/></TableCell>
                                                        <TableCell className={tableCellClasses}><div/></TableCell>
                                                        <TableCell className={tableCellClasses}><div/></TableCell>
                                                                    <TableCell className={tableCellClasses}><div/></TableCell>
                                                                    <TableCell className={tableCellClasses}><div/></TableCell>
                                                                    <TableCell className={tableCellClasses}><div/></TableCell>
                                                                    <TableCell className={tableCellClasses}><div/></TableCell>


                    <TableCell className={classes.tableActions}>
                      <Tooltip
                        id="tooltip-top-start"
                        title="Schedule a Pickup"
                        placement="top"
                        classes={{ tooltip: classes.tooltip }}
                      >
                        <div className="progress-group-prepend">
                                                                <span className="progress-group-text">
                                                                    <CButton color="success" onClick={handlePickup(tasks[value])}>Schedule</CButton>
                                                                </span>
                                                             </div>
                      </Tooltip>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          );
  }

  handlePickup(dropOffOrgId)
      {
           console.log("DROPOFF: "+dropOffOrgId);
           const payload = {
              pickupNotificationId:this.props.location.state.data.pickupNotificationId,
              dropOffOrgId: dropOffOrgId,
              sourceOrg:store.getState().sourceOrg
           };

           //console.log(JSON.stringify(payload));

           const apiUrl = window.location.protocol +"//"+window.location.hostname+"/notification/schedulePickup/";
                    axios.post(apiUrl,payload).then((response) => {
                          console.log(JSON.stringify(response.data));
                          this.element = (
                                        <CModal
                                          size="sm"
                                          show={true}
                                          color="success"
                                          fade="true"
                                        >
                                          <CModalHeader>
                                            <CModalTitle>Pickup Confirmation</CModalTitle>
                                          </CModalHeader>
                                          <CModalBody>
                                               <CCallout color="info">
                                                <div className="progress-group-prepend">
                                                   <small className="text-muted">Your Pickup is scheduled</small>
                                                </div>
                                              </CCallout>
                                          </CModalBody>
                                          <CModalFooter>
                                              <CButton color="success" onClick={this.handlePickupProcess}>OK</CButton>
                                          </CModalFooter>
                                        </CModal>
                                   );
                                   ReactDOM.unmountComponentAtNode(document.getElementById('schedulePickup'));
                                   ReactDOM.render(this.element,document.getElementById('schedulePickup'));
            }).catch(err => {
             //TODO
             console.log(JSON.stringify(err));
            });
      }

      handlePickupProcess()
      {
          this.props.history.push({
              pathname: "/home"
          });
      }
}

Tasks.propTypes = {
  tasksIndexes: PropTypes.arrayOf(PropTypes.number),
  tasks: PropTypes.arrayOf(PropTypes.node),
  rtlActive: PropTypes.bool,
  checkedIndexes: PropTypes.array
};

export default withRouter(Tasks)



import React, { lazy } from 'react'
import {
  CBadge,
  CButton,
  CButtonGroup,
  CCard,
  CCardBody,
  CCardFooter,
  CCardHeader,
  CCol,
  CProgress,
  CRow,
  CCallout
} from '@coreui/react'
import CIcon from '@coreui/icons-react'
import GridItem from "../components/Grid/GridItem.js";
import GridContainer from "../components/Grid/GridContainer.js";
import CustomTabs from "../components/CustomTabs/CustomTabs.js";
import DropOffTasks from "../components/Tasks/DropOffTasks.js";
import { bugs, website, server } from "./variables/general.js";

import BugReport from "@material-ui/icons/BugReport";

const InProgressTransactionView = ({inProgress}) => {
    var array = [];
    var tasksIndexes = [];
    for (const [index, value] of inProgress.entries()) {
        const org = value.pickupNotification.sourceOrg.orgName;
        array.push(org);
        tasksIndexes.push(index);
    }
    var actionsArray = [];
    for (var i=0;i<1;i++) {
            const actionRow = ["action"];
            actionsArray.push(actionRow);
    }

    return(
        <div>
            <GridContainer>
                             <GridItem xs={12} sm={12} md={6}>
                               <CustomTabs
                                 title="Delivery Status"
                                 headerColor="primary"
                                 tabs={[
                                   {
                                     tabName: "In-Progress",
                                     tabIcon: BugReport,
                                     tabContent: (
                                       <DropOffTasks
                                         checkedIndexes={[0]}
                                         tasksIndexes={tasksIndexes}
                                         tasks={array}
                                         actions={inProgress}
                                       />
                                     )
                                   },
                                 ]}
                               />
                             </GridItem>
                         </GridContainer>
        </div>
    )
}

const DropOffDash = ({inProgress}) => {
  return (
    <>
      <div id="inProgress">
        <InProgressTransactionView inProgress={inProgress} />
      </div>
    </>
  )
}

export default DropOffDash