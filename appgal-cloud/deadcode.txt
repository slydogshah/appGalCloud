style="background-image: url('images/background/bg5.png'),url('images/background/bg6.png'), var(--gradient-sec);"
className="c-app c-default-layout flex-row align-items-center"


import React from "react";
import PropTypes from "prop-types";
import classnames from "classnames";
// @material-ui/core components
import { makeStyles } from "@material-ui/core/styles";
import Checkbox from "@material-ui/core/Checkbox";
import Tooltip from "@material-ui/core/Tooltip";
import IconButton from "@material-ui/core/IconButton";
import Table from "@material-ui/core/Table";
import TableRow from "@material-ui/core/TableRow";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
// @material-ui/icons
import Edit from "@material-ui/icons/Edit";
import Close from "@material-ui/icons/Close";
import Check from "@material-ui/icons/Check";
// core components
import styles from "../../assets/jss/material-dashboard-react/components/tasksStyle.js";
import {
  CCardGroup,
  CCardFooter,
  CCol,
  CLink,
  CRow,
  CWidgetProgress,
  CWidgetIcon,
  CWidgetProgressIcon,
  CWidgetSimple,
  CWidgetBrand,
  CHeaderNavLink,
  CProgress,
  CNav,
  CNavLink,
  CWidgetDropdown,
  CDropdown,
  CDropdownMenu,
  CDropdownToggle,
  CDropdownItem,
  CAlert,
  CModal,
  CModalHeader,
  CModalTitle,
  CModalBody,
  CCard,
  CCardHeader,
  CCardBody,
  CFormGroup,
  CLabel,
  CInput,
  CSelect,
  CModalFooter,
  CButton,
  CBadge,
  CButtonGroup,
  CCallout
} from '@coreui/react'

import ReactDOM from 'react-dom';
import axios from 'axios'
import { AppContext,store} from "../../application/AppContext"

const useStyles = makeStyles(styles);



//export default function Tasks(props) {
class Tasks extends React.Component
{
  constructor(props)
  {
          super(props);

          const classes = useStyles();
            const [checked, setChecked] = React.useState([...props.checkedIndexes]);
            const handleToggle = value => {
              const currentIndex = checked.indexOf(value);
              const newChecked = [...checked];
              if (currentIndex === -1) {
                newChecked.push(value);
              } else {
                newChecked.splice(currentIndex, 1);
              }
              setChecked(newChecked);
            };
            const { tasksIndexes, tasks, rtlActive, actions } = props;
            const tableCellClasses = classnames(classes.tableCell, {
              [classes.tableCellRTL]: rtlActive
            });

          //console.log("State: "+JSON.stringify(this.props.location.state.data));
          this.handlePickupProcess = this.handlePickupProcess.bind(this);
          this.handlePickup = this.handlePickup.bind(this);
  }

  render(){
        return (
            <Table className={classes.table}>
              <TableBody>
                {tasksIndexes.map(value => (
                  <TableRow key={value} className={classes.tableRow}>
                    <TableCell className={tableCellClasses}>{tasks[value]}</TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                    <TableCell className={tableCellClasses}><div/></TableCell>
                                <TableCell className={tableCellClasses}><div/></TableCell>
                                <TableCell className={tableCellClasses}><div/></TableCell>
                                <TableCell className={tableCellClasses}><div/></TableCell>
                                <TableCell className={tableCellClasses}><div/></TableCell>
                                            <TableCell className={tableCellClasses}><div/></TableCell>
                                            <TableCell className={tableCellClasses}><div/></TableCell>
                                            <TableCell className={tableCellClasses}><div/></TableCell>
                                            <TableCell className={tableCellClasses}><div/></TableCell>
                                                        <TableCell className={tableCellClasses}><div/></TableCell>
                                                        <TableCell className={tableCellClasses}><div/></TableCell>
                                                        <TableCell className={tableCellClasses}><div/></TableCell>
                                                        <TableCell className={tableCellClasses}><div/></TableCell>
                                                                    <TableCell className={tableCellClasses}><div/></TableCell>
                                                                    <TableCell className={tableCellClasses}><div/></TableCell>
                                                                    <TableCell className={tableCellClasses}><div/></TableCell>
                                                                    <TableCell className={tableCellClasses}><div/></TableCell>


                    <TableCell className={classes.tableActions}>
                      <Tooltip
                        id="tooltip-top-start"
                        title="Schedule a Pickup"
                        placement="top"
                        classes={{ tooltip: classes.tooltip }}
                      >
                        <div className="progress-group-prepend">
                                                                <span className="progress-group-text">
                                                                    <CButton color="success" onClick={handlePickup(tasks[value])}>Schedule</CButton>
                                                                </span>
                                                             </div>
                      </Tooltip>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          );
  }

  handlePickup(dropOffOrgId)
      {
           console.log("DROPOFF: "+dropOffOrgId);
           const payload = {
              pickupNotificationId:this.props.location.state.data.pickupNotificationId,
              dropOffOrgId: dropOffOrgId,
              sourceOrg:store.getState().sourceOrg
           };

           //console.log(JSON.stringify(payload));

           const apiUrl = window.location.protocol +"//"+window.location.hostname+"/notification/schedulePickup/";
                    axios.post(apiUrl,payload).then((response) => {
                          console.log(JSON.stringify(response.data));
                          this.element = (
                                        <CModal
                                          size="sm"
                                          show={true}
                                          color="success"
                                          fade="true"
                                        >
                                          <CModalHeader>
                                            <CModalTitle>Pickup Confirmation</CModalTitle>
                                          </CModalHeader>
                                          <CModalBody>
                                               <CCallout color="info">
                                                <div className="progress-group-prepend">
                                                   <small className="text-muted">Your Pickup is scheduled</small>
                                                </div>
                                              </CCallout>
                                          </CModalBody>
                                          <CModalFooter>
                                              <CButton color="success" onClick={this.handlePickupProcess}>OK</CButton>
                                          </CModalFooter>
                                        </CModal>
                                   );
                                   ReactDOM.unmountComponentAtNode(document.getElementById('schedulePickup'));
                                   ReactDOM.render(this.element,document.getElementById('schedulePickup'));
            }).catch(err => {
             //TODO
             console.log(JSON.stringify(err));
            });
      }

      handlePickupProcess()
      {
          this.props.history.push({
              pathname: "/home"
          });
      }
}

Tasks.propTypes = {
  tasksIndexes: PropTypes.arrayOf(PropTypes.number),
  tasks: PropTypes.arrayOf(PropTypes.node),
  rtlActive: PropTypes.bool,
  checkedIndexes: PropTypes.array
};

export default withRouter(Tasks)



import React, { lazy } from 'react'
import {
  CBadge,
  CButton,
  CButtonGroup,
  CCard,
  CCardBody,
  CCardFooter,
  CCardHeader,
  CCol,
  CProgress,
  CRow,
  CCallout
} from '@coreui/react'
import CIcon from '@coreui/icons-react'
import GridItem from "../components/Grid/GridItem.js";
import GridContainer from "../components/Grid/GridContainer.js";
import CustomTabs from "../components/CustomTabs/CustomTabs.js";
import DropOffTasks from "../components/Tasks/DropOffTasks.js";
import { bugs, website, server } from "./variables/general.js";

import BugReport from "@material-ui/icons/BugReport";

const InProgressTransactionView = ({inProgress}) => {
    var array = [];
    var tasksIndexes = [];
    for (const [index, value] of inProgress.entries()) {
        const org = value.pickupNotification.sourceOrg.orgName;
        array.push(org);
        tasksIndexes.push(index);
    }
    var actionsArray = [];
    for (var i=0;i<1;i++) {
            const actionRow = ["action"];
            actionsArray.push(actionRow);
    }

    return(
        <div>
            <GridContainer>
                             <GridItem xs={12} sm={12} md={6}>
                               <CustomTabs
                                 title="Delivery Status"
                                 headerColor="primary"
                                 tabs={[
                                   {
                                     tabName: "In-Progress",
                                     tabIcon: BugReport,
                                     tabContent: (
                                       <DropOffTasks
                                         checkedIndexes={[0]}
                                         tasksIndexes={tasksIndexes}
                                         tasks={array}
                                         actions={inProgress}
                                       />
                                     )
                                   },
                                 ]}
                               />
                             </GridItem>
                         </GridContainer>
        </div>
    )
}

const DropOffDash = ({inProgress}) => {
  return (
    <>
      <div id="inProgress">
        <InProgressTransactionView inProgress={inProgress} />
      </div>
    </>
  )
}

export default DropOffDash



import React, { useEffect, useState, createRef, lazy } from 'react'
import ReactDOM from 'react-dom';
import { Link } from 'react-router-dom'
import { withRouter } from "react-router";
import Modal from 'react-modal';
import OverlayMixin from 'react-overlays';
import axios from 'axios'
import https from 'http';
import {
  CButton,
  CCard,
  CCardBody,
  CCardGroup,
  CCol,
  CContainer,
  CForm,
  CInput,
  CInputGroup,
  CInputGroupPrepend,
  CInputGroupText,
  CModal,
  CModalBody,
  CModalFooter,
  CModalHeader,
  CModalTitle,
  CPopover,
  CAlert,
  CProgress,
  CRow
} from '@coreui/react'
import CIcon from '@coreui/icons-react'
import { AppContext,store} from "./AppContext"

const WaitOnData = ({state, handleRegistration, handleChange}) => {
          if (state.data === null) {
                return <p>Loading...</p>;
              }
          return(
            <div className="c-app c-default-layout flex-row align-items-center">
                        <CContainer>
                          <CRow className="justify-content-center">
                            <CCol md="8">
                              <CCardGroup>
                                <CCard className="p-4">
                                      <CCardBody>
                                        <CForm>
                                          <h1>Profile</h1>
                                          <div id="system_error"/>
                                          <CInputGroup className="mb-3">
                                            <CInputGroupPrepend>
                                              <CInputGroupText>
                                                <CIcon name="cil-user" />
                                              </CInputGroupText>
                                            </CInputGroupPrepend>
                                            <CInput type="text" placeholder="Username" autoComplete="username"
                                            name="email" onChange={handleChange} value={state.data.email}/>
                                            <div id="emailRequired"/>
                                            <div id="emailInvalid"/>
                                          </CInputGroup>
                                          <CInputGroup className="mb-4">
                                            <CInputGroupPrepend>
                                              <CInputGroupText>
                                                <CIcon name="cil-lock-locked" />
                                              </CInputGroupText>
                                            </CInputGroupPrepend>
                                            <CInput type="password" placeholder="Password" autoComplete="current-password"
                                            name="password" onChange={handleChange}/>
                                            <div id="passwordRequired"/>
                                            <div id="password_mismatch"/>
                                          </CInputGroup>
                                          <CInputGroup className="mb-5">
                                              <CInputGroupPrepend>
                                                                                  <CInputGroupText>
                                                                                    <CIcon name="cil-lock-locked" />
                                                                                  </CInputGroupText>
                                                                                </CInputGroupPrepend>
                                              <CInput type="text" placeholder="Mobile" autoComplete="mobile" name="mobile" onChange={handleChange}
                                              value={state.data.mobile}/>
                                              <div id="mobileRequired"/>
                                              <div id="phoneInvalid"/>
                                          </CInputGroup>
                                          <CInputGroup className="mb-6">
                                              <CInputGroupPrepend>
                                                                                  <CInputGroupText>
                                                                                    <CIcon name="cil-lock-locked" />
                                                                                  </CInputGroupText>
                                                                                </CInputGroupPrepend>
                                              <CInput type="text" placeholder="Organization" autoComplete="organization"
                                              name="sourceOrgId" onChange={handleChange}/>
                                              <div id="organizationRequired"/>
                                          </CInputGroup>
                                          <br/><br/>
                                          <CButton color="success" block onClick={handleRegistration}>Save</CButton>
                                          <div id="errorAlert" />
                                        </CForm>
                                      </CCardBody>
                                    </CCard>
                              </CCardGroup>
                            </CCol>
                          </CRow>
                        </CContainer>
                      </div>
          );
}

class Profile extends React.Component {
  mixins = [OverlayMixin];
  constructor(props) {
    super(props);
    this.state = {data: null};
    this.handleChange = this.handleChange.bind(this);
    this.handleRegistration = this.handleRegistration.bind(this);

    this.renderMyData();
  }

  handleChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;
    this.setState({
          [name]: value
    });
  }

  handleRegistration(event)
      {
        ReactDOM.unmountComponentAtNode(document.getElementById('emailRequired'));
        ReactDOM.unmountComponentAtNode(document.getElementById('passwordRequired'));
        ReactDOM.unmountComponentAtNode(document.getElementById('mobileRequired'));
        ReactDOM.unmountComponentAtNode(document.getElementById('organizationRequired'));
        ReactDOM.unmountComponentAtNode(document.getElementById('emailInvalid'));
        ReactDOM.unmountComponentAtNode(document.getElementById('phoneInvalid'));
        ReactDOM.unmountComponentAtNode(document.getElementById('errorAlert'));
        const required = (
                         <CAlert
                         color="warning"
                         >
                            Required
                        </CAlert>
                     );
        let validationSuccess = true;
        if(this.state.email == null || this.state.email == "")
        {
          ReactDOM.render(required,document.getElementById('emailRequired'));
          validationSuccess = false;
        }
        if(this.state.password == null || this.state.password == "")
        {
            ReactDOM.render(required,document.getElementById('passwordRequired'));
            validationSuccess = false;
        }
        if(this.state.mobile == null || this.state.mobile == "")
        {
          ReactDOM.render(required,document.getElementById('mobileRequired'));
          validationSuccess = false;
        }
        if(this.state.sourceOrgId == null || this.state.sourceOrgId == "")
        {
          ReactDOM.render(required,document.getElementById('organizationRequired'));
          validationSuccess = false;
        }

        if(validationSuccess)
        {
            const apiUrl = window.location.protocol +"//"+window.location.hostname+"/registration/org/";
            // At request level
            const agent = new https.Agent({
              rejectUnauthorized: false
            });
            axios.post(apiUrl,{httpsAgent: agent,"email":this.state.email,"password":this.state.password,"mobile":this.state.mobile,"sourceOrgId":this.state.sourceOrgId,"profileType":this.state.profileType}).
            then((response) => {
                      const loginUrl = window.location.protocol +"//"+window.location.hostname+"/registration/login/";
                      axios.post(loginUrl,{"email":this.state.email,"password":this.state.password}).
                      then((response) => {
                          this.props.history.push({
                              pathname: "/home",
                              state: response.data
                          });
                      });
            }).catch(err => {
                      if(err.response != null && err.response.status == 401)
                      {
                           this.setState({
                             "errorMessage": "Login Failed. Please check your Username and/or Password"
                           });
                           const element = (
                                                                         <CAlert
                                                                         color="dark"
                                                                         closeButton
                                                                         >
                                                                            {this.state.errorMessage}
                                                                        </CAlert>
                                                                     );

                                               ReactDOM.render(element,document.getElementById('errorAlert'));
                      }
                      else if(err.response != null && err.response.status == 409)
                      {
                           this.setState({
                             "errorMessage": "This email is already registered"
                           });
                           const element = (
                                                                                                  <CAlert
                                                                                                  color="dark"
                                                                                                  closeButton
                                                                                                  >
                                                                                                     {this.state.errorMessage}
                                                                                                 </CAlert>
                                                                                              );

                                                                        ReactDOM.render(element,document.getElementById('errorAlert'));
                      }
                      else if(err.response != null && err.response.status == 400)
                      {
                          const violations = err.response.data.violations;
                          if(violations.includes("email_invalid"))
                          {
                          const emailInvalid = (
                                                 <CAlert
                                                 color="warning"
                                                 >
                                                    Email is not valid
                                                </CAlert>
                                             );
                          ReactDOM.render(emailInvalid,document.getElementById('emailInvalid'));
                          }
                          if(violations.includes("phone_invalid"))
                          {
                              const phoneInvalid = (
                                                                             <CAlert
                                                                             color="warning"
                                                                             >
                                                                                Phone is not valid
                                                                            </CAlert>
                                                                         );
                              ReactDOM.render(phoneInvalid,document.getElementById('phoneInvalid'));
                          }
                      }
                      else
                      {
                           this.setState({
                               "errorMessage": "Unknown Error. Please check your Network Connection"
                           });
                           const element = (
                                                                                                  <CAlert
                                                                                                  color="dark"
                                                                                                  closeButton
                                                                                                  >
                                                                                                     {this.state.errorMessage}
                                                                                                 </CAlert>
                                                                                              );

                                                                        ReactDOM.render(element,document.getElementById('errorAlert'));
                      }
                });

        }
    }

    renderMyData(){
        const email = store.getState().email;
        const apiUrl = window.location.protocol +"//"+window.location.hostname+"/registration/profile/?email="+email;
        axios.get(apiUrl).then((response) => {
            this.setState({data: response.data});
        });
    }

  render() {
    return (
            <div>
                <WaitOnData state={this.state} handleRegistration={this.handleRegistration} handleChange={this.handleChange}/>
            </div>
    );
  }
}

export default withRouter(Profile)


<div className="c-app c-default-layout flex-row align-items-center">
                          <CContainer>
                            <CRow className="justify-content-center">
                                <CCol md="9" lg="7" xl="6">
                                    <CCard className="mx-4">
                                    <CCardBody className="p-4">
                                        <h1>Schedule A Pickup</h1>
                                        <CInputGroup>
                                         <CLabel htmlFor="ccmonth">Preferred Pickup Time</CLabel>
                                         <CSelect custom name="ccmonth" id="ccmonth">
                                           <option value="0">12:00 AM</option>
                                           <option value="12">12:00 PM</option>
                                           <option value="23">11:59 PM</option>
                                         </CSelect>
                                        </CInputGroup>
                                        <CInputGroup className="mb-3">
                                            <CLabel htmlFor="foodType">Food Type</CLabel>
                                            <CSelect custom name="foodType" id="foodType" onChange="">
                                                <option value="0">--Select--</option>
                                                <option value="VEG">VEG</option>
                                                <option value="NON_VEG">NON-VEG</option>
                                            </CSelect>
                                        </CInputGroup>
                                        <CInputGroup className="mb-3">
                                            <CInputGroupPrepend>
                                              <CInputGroupText>
                                                <CIcon name="cil-lock-locked" />
                                              </CInputGroupText>
                                            </CInputGroupPrepend>
                                            <div className="form-group">
                                              <label for="file">File upload</label>
                                              <input id="file" name="file" type="file" onChange={(event) => {
                                                const fileUpload = event.currentTarget.files[0];
                                                setFieldValue("file", fileUpload);
                                                this.state.upload = fileUpload;
                                              }} className="form-control" />
                                              <Thumb file={values.file} />
                                            </div>
                                        </CInputGroup>
                                        <div id="errorAlert" />
                                        <CButton color="success" block onClick="">Add Details</CButton>
                                    </CCardBody>
                                    </CCard>
                                </CCol>
                            </CRow>
                          </CContainer>
                      </div>
                      </form>
                    );
                  }} />
              </div>






              import React, { useEffect, useState, createRef } from 'react'
              import ReactDOM from 'react-dom';
              import { withRouter } from "react-router";
              import axios from 'axios'
              import {
                CCardGroup,
                CCardFooter,
                CCol,
                CLink,
                CRow,
                CWidgetProgress,
                CWidgetIcon,
                CWidgetProgressIcon,
                CWidgetSimple,
                CWidgetBrand,
                CHeaderNavLink,
                CProgress,
                CNav,
                CNavLink,
                CWidgetDropdown,
                CDropdown,
                CDropdownMenu,
                CDropdownToggle,
                CDropdownItem,
                CAlert,
                CModal,
                CModalHeader,
                CModalTitle,
                CModalBody,
                CCard,
                CCardHeader,
                CCardBody,
                CFormGroup,
                CLabel,
                CInput,
                CSelect,
                CModalFooter,
                CButton,
                CCallout,
              } from '@coreui/react'
              import CIcon from '@coreui/icons-react'
              import WidgetsDropdown from './WidgetsDropdown'
              import Modals from '../views/notifications/modals/Modals'
              import ChartLineSimple from '../views/charts/ChartLineSimple'
              import ChartBarSimple from '../views/charts/ChartBarSimple'
              import { AppContext,store} from "./AppContext"
              import GridItem from "../components/Grid/GridItem.js";
              import GridContainer from "../components/Grid/GridContainer.js";
              import CustomTabs from "../components/CustomTabs/CustomTabs.js";
              import BugReport from "@material-ui/icons/BugReport";
              import PropTypes from "prop-types";
              import { makeStyles } from "@material-ui/core/styles";
              import styles from "../assets/jss/material-dashboard-react/components/tasksStyle.js";
              import classnames from "classnames";
              import Checkbox from "@material-ui/core/Checkbox";
              import Tooltip from "@material-ui/core/Tooltip";
              import IconButton from "@material-ui/core/IconButton";
              import Table from "@material-ui/core/Table";
              import TableRow from "@material-ui/core/TableRow";
              import TableBody from "@material-ui/core/TableBody";
              import TableCell from "@material-ui/core/TableCell";
              import TableHead from "@material-ui/core/TableHead";
              import Tasks from "../components/Tasks/Tasks.js";
              // @material-ui/icons
              import Edit from "@material-ui/icons/Edit";
              import Close from "@material-ui/icons/Close";
              import Check from "@material-ui/icons/Check";
              // core components

              import { bugs, website, server } from "../variables/general.js";

              import Card from "../components/Card/Card.js";
              import CardHeader from "../components/Card/CardHeader.js";
              import CardBody from "../components/Card/CardBody.js";

              const useStyles = makeStyles(styles);



              PickupTasks.propTypes = {
                tasksIndexes: PropTypes.arrayOf(PropTypes.number),
                tasks: PropTypes.arrayOf(PropTypes.node),
                rtlActive: PropTypes.bool,
                checkedIndexes: PropTypes.array
              };


              function PickupTasks(props) {
                const classes = useStyles();
                const [checked, setChecked] = React.useState([...props.checkedIndexes]);
                const handleToggle = value => {
                  const currentIndex = checked.indexOf(value);
                  const newChecked = [...checked];
                  if (currentIndex === -1) {
                    newChecked.push(value);
                  } else {
                    newChecked.splice(currentIndex, 1);
                  }
                  setChecked(newChecked);
                };
                const { tasksIndexes, tasks, rtlActive} = props;
                const tableCellClasses = classnames(classes.tableCell, {
                  [classes.tableCellRTL]: rtlActive
                });
                const { tableData, tableHeaderColor } = props;
                const tableHead=["Drop Off Organization","Contact Email"];
                return (
                            <Table className={classes.table}>
                              <TableHead className={classes[tableHeaderColor + "TableHeader"]}>
                                          <TableRow className={classes.tableHeadRow}>
                                            {tableHead.map((prop, key) => {
                                              return (
                                                <TableCell
                                                  className={classes.tableCell + " " + classes.tableHeadCell}
                                                  key={key}
                                                >
                                                  {prop}
                                                </TableCell>
                                              );
                                            })}
                                          </TableRow>
                              </TableHead>
                              <TableBody>
                                {tasksIndexes.map(value => (
                                  <TableRow key={value} className={classes.tableRow}>
                                    <TableCell className={tableCellClasses}>{tasks[value]}</TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          )
              }



              const WaitOnData = ({state, props, handlePickup, handlePickupHistory}) => {
                  /*if (state.data === null) {
                    return <p>Loading...</p>;
                  }*/
                  const classes = useStyles();
                  const orgId = store.getState().sourceOrg.orgId;
                  const apiUrl = window.location.protocol +"//"+window.location.hostname+"/tx/recovery/?orgId="+orgId;
                  axios.get(apiUrl).then((response) => {
                      //console.log("MY_DATA: "+JSON.stringify(response.data));
                      //this.setState({data: response.data});
                      state.data = response.data;
                      //console.log("******INVOKED********");
                          const inProgress = state.data.pending;
                          var array = [];
                          var tasksIndexes = [];
                          for (const [index, value] of inProgress.entries()) {
                              const org = value.pickupNotification.dropOffOrg.orgName;
                              const orgContact = value.pickupNotification.dropOffOrg.orgContactEmail;
                              array.push(org);
                              array.push(orgContact);
                              tasksIndexes.push(index);
                          }

                          const history = state.data.history;
                          var historyArray = [];
                          var historyIndexes = [];
                          for (const [index, value] of history.entries()) {
                              const org = value.pickupNotification.sourceOrg.orgName;
                              historyArray.push(org);
                              historyIndexes.push(index);
                          }
                          const element = (
                                <>
                                          <br/><br/><br/><br/>
                                          <CRow>
                                          <CCol>
                                          <CCardGroup className="mb-4">
                                                 <CWidgetDropdown
                                                           color="gradient-primary"
                                                           header={state.data.pending.length}
                                                           text="Deliveries In-Progress"
                                                           footerSlot={
                                                             <ChartLineSimple
                                                               pointed
                                                               className="c-chart-wrapper mt-3 mx-3"
                                                               style={{height: '70px'}}
                                                               dataPoints={[65, 59, 84, 84, 51, 55, 40]}
                                                               pointHoverBackgroundColor="primary"
                                                               label="Members"
                                                               labels="months"
                                                             />
                                                           }
                                                         >
                                                         <CDropdown>
                                                            <CDropdownToggle color="transparent">
                                                              <CIcon name="cil-settings"/>
                                                            </CDropdownToggle>
                                                            <CDropdownMenu className="pt-0" placement="bottom-end">
                                                             <CDropdownItem onClick={(e) => {
                                                                      props.history.push({
                                                                         pathname: "/addPickupDetails"
                                                                      });
                                                             }}>Schedule</CDropdownItem>
                                                            </CDropdownMenu>
                                                         </CDropdown>
                                                     </CWidgetDropdown>
                                          </CCardGroup>
                                          </CCol>
                                          </CRow>
                                          <CRow>
                                              <CCol>
                                                  <GridContainer>
                                                       <GridItem xs={12} sm={12} md={6}>
                                                                 <Card>
                                                                   <CardHeader color="warning">
                                                                     <h4 className={classes.cardTitleWhite}>Employees Stats</h4>
                                                                     <p className={classes.cardCategoryWhite}>
                                                                       New employees on 15th September, 2016
                                                                     </p>
                                                                   </CardHeader>
                                                                   <CardBody>
                                                                     <Table
                                                                       tableHeaderColor="warning"
                                                                       tableHead={["ID", "Name", "Salary", "Country"]}
                                                                       tableData={[
                                                                         ["1", "Dakota Rice", "$36,738", "Niger"],
                                                                         ["2", "Minerva Hooper", "$23,789", "Curaçao"],
                                                                         ["3", "Sage Rodriguez", "$56,142", "Netherlands"],
                                                                         ["4", "Philip Chaney", "$38,735", "Korea, South"]
                                                                       ]}
                                                                     />
                                                                   </CardBody>
                                                                 </Card>
                                                               </GridItem>
                                                   </GridContainer>
                                              </CCol>
                                          </CRow>
                                          </>
                              );
                              ReactDOM.unmountComponentAtNode(document.getElementById('parent'));
                              ReactDOM.render(element,document.getElementById('parent'));
                  });

                  //TODO: add spinner
                  return <div/>;
              }

              class Home extends React.Component {
                constructor(props) {
                    super(props);
                    this.handlePickupProcess = this.handlePickupProcess.bind(this);
                    this.handlePickupHistory = this.handlePickupHistory.bind(this);
                    this.state = {data: null};
                    //this.renderMyData();
                }

                handlePickupProcess(event)
                {
                    this.props.history.push({
                              pathname: "/addPickupDetails"
                    });
                }

                handlePickupHistory(event)
                {
                  this.props.history.push({
                                  pathname: "/pickupHistory"
                        });
                }

                render() {
                   return (
                        <>
                        <div id="parent">
                          <WaitOnData state={this.state} props={this.props} handlePickup={this.handlePickup} handlePickupHistory={this.handlePickupHistory}/>
                        </div>
                        </>
                    );
                }
              }

              export default withRouter(Home)



              import React from "react";
              import PropTypes from "prop-types";
              // @material-ui/core components
              import { makeStyles } from "@material-ui/core/styles";
              import Table from "@material-ui/core/Table";
              import TableHead from "@material-ui/core/TableHead";
              import TableRow from "@material-ui/core/TableRow";
              import TableBody from "@material-ui/core/TableBody";
              import TableCell from "@material-ui/core/TableCell";
              // core components
              import styles from "../../assets/jss/material-dashboard-react/components/tableStyle.js";

              const useStyles = makeStyles(styles);

              export default function CustomTable(props) {
                const classes = useStyles();
                const { tableHead, tableData, tableHeaderColor } = props;
                return (
                  <div className={classes.tableResponsive}>
                    <Table className={classes.table}>
                      {tableHead !== undefined ? (
                        <TableHead className={classes[tableHeaderColor + "TableHeader"]}>
                          <TableRow className={classes.tableHeadRow}>
                            {tableHead.map((prop, key) => {
                              return (
                                <TableCell
                                  className={classes.tableCell + " " + classes.tableHeadCell}
                                  key={key}
                                >
                                  {prop}
                                </TableCell>
                              );
                            })}
                          </TableRow>
                        </TableHead>
                      ) : null}
                      <TableBody>
                        {tableData.map((prop, key) => {
                          return (
                            <TableRow key={key} className={classes.tableBodyRow}>
                              {prop.map((prop, key) => {
                                return (
                                  <TableCell className={classes.tableCell} key={key}>
                                    {prop}
                                  </TableCell>
                                );
                              })}
                            </TableRow>
                          );
                        })}
                      </TableBody>
                    </Table>
                  </div>
                );
              }

              CustomTable.defaultProps = {
                tableHeaderColor: "gray"
              };

              CustomTable.propTypes = {
                tableHeaderColor: PropTypes.oneOf([
                  "warning",
                  "primary",
                  "danger",
                  "success",
                  "info",
                  "rose",
                  "gray"
                ]),
                tableHead: PropTypes.arrayOf(PropTypes.string),
                tableData: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))
              };


              {"props":{"history":{"length":46,"action":"PUSH","location":{"pathname":"/addPickupDetails","search":"","hash":"","key":"mvty97"}},"location":{"pathname":"/addPickupDetails","search":"","hash":"","key":"mvty97"},"match":{"path":"/","url":"/","isExact":false,"params":{}}}}



import React, { useEffect, useState, createRef } from 'react'
import ReactDOM from 'react-dom';
import { withRouter } from "react-router";
import axios from 'axios'
import {
  CCardGroup,
  CCardFooter,
  CCol,
  CLink,
  CRow,
  CWidgetProgress,
  CWidgetIcon,
  CWidgetProgressIcon,
  CWidgetSimple,
  CWidgetBrand,
  CHeaderNavLink,
  CProgress,
  CNav,
  CNavLink,
  CWidgetDropdown,
  CDropdown,
  CDropdownMenu,
  CDropdownToggle,
  CDropdownItem,
  CAlert,
  CModal,
  CModalHeader,
  CModalTitle,
  CModalBody,
  CCard,
  CCardHeader,
  CCardBody,
  CFormGroup,
  CLabel,
  CInput,
  CSelect,
  CModalFooter,
  CButton
} from '@coreui/react'
import CIcon from '@coreui/icons-react'
import WidgetsDropdown from './WidgetsDropdown'
import Modals from '../views/notifications/modals/Modals'
import ChartLineSimple from '../views/charts/ChartLineSimple'
import ChartBarSimple from '../views/charts/ChartBarSimple'
import { AppContext,store} from "./AppContext"
import GridItem from "../components/Grid/GridItem.js";
import GridContainer from "../components/Grid/GridContainer.js";
import CustomTabs from "../components/CustomTabs/CustomTabs.js";
import BugReport from "@material-ui/icons/BugReport";
import PropTypes from "prop-types";
import { makeStyles } from "@material-ui/core/styles";
import styles from "../assets/jss/material-dashboard-react/components/tasksStyle.js";
import classnames from "classnames";
import Checkbox from "@material-ui/core/Checkbox";
import Tooltip from "@material-ui/core/Tooltip";
import IconButton from "@material-ui/core/IconButton";
import Table from "@material-ui/core/Table";
import TableRow from "@material-ui/core/TableRow";
import TableBody from "@material-ui/core/TableBody";
import TableCell from "@material-ui/core/TableCell";
// @material-ui/icons
import Edit from "@material-ui/icons/Edit";
import Close from "@material-ui/icons/Close";
import Check from "@material-ui/icons/Check";
// core components

const useStyles = makeStyles(styles);

DropOffTasks.propTypes = {
  tasksIndexes: PropTypes.arrayOf(PropTypes.number),
  tasks: PropTypes.arrayOf(PropTypes.node),
  rtlActive: PropTypes.bool,
  checkedIndexes: PropTypes.array
};

function DropOffTasks(props) {
  const classes = useStyles();
  const [checked, setChecked] = React.useState([...props.checkedIndexes]);
  const handleToggle = value => {
    const currentIndex = checked.indexOf(value);
    const newChecked = [...checked];
    if (currentIndex === -1) {
      newChecked.push(value);
    } else {
      newChecked.splice(currentIndex, 1);
    }
    setChecked(newChecked);
  };
  const { tasksIndexes, tasks, rtlActive, actions } = props;
  const tableCellClasses = classnames(classes.tableCell, {
    [classes.tableCellRTL]: rtlActive
  });
  if(actions.length > 0){
  return (
              <Table className={classes.table}>
                <TableBody>
                  {tasksIndexes.map(value => (
                    <TableRow key={value} className={classes.tableRow}>
                      <TableCell className={tableCellClasses}>{tasks[value]}</TableCell>
                      <TableCell className={tableCellClasses}><div/></TableCell>
                      <TableCell className={tableCellClasses}><div/></TableCell>
                      <TableCell className={tableCellClasses}><div/></TableCell>
                      <TableCell className={tableCellClasses}><div/></TableCell>
                      <TableCell className={tableCellClasses}><div/></TableCell>
                                  <TableCell className={tableCellClasses}><div/></TableCell>
                                  <TableCell className={tableCellClasses}><div/></TableCell>
                                  <TableCell className={tableCellClasses}><div/></TableCell>
                                  <TableCell className={tableCellClasses}><div/></TableCell>
                                              <TableCell className={tableCellClasses}><div/></TableCell>
                                              <TableCell className={tableCellClasses}><div/></TableCell>
                                              <TableCell className={tableCellClasses}><div/></TableCell>
                                              <TableCell className={tableCellClasses}><div/></TableCell>
                                                          <TableCell className={tableCellClasses}><div/></TableCell>
                                                          <TableCell className={tableCellClasses}><div/></TableCell>
                                                          <TableCell className={tableCellClasses}><div/></TableCell>
                                                          <TableCell className={tableCellClasses}><div/></TableCell>
                                                                      <TableCell className={tableCellClasses}><div/></TableCell>
                                                                      <TableCell className={tableCellClasses}><div/></TableCell>
                                                                      <TableCell className={tableCellClasses}><div/></TableCell>
                                                                      <TableCell className={tableCellClasses}><div/></TableCell>


                               <TableCell className={classes.tableActions}>
                                                                                            <Tooltip
                                                                                              id="tooltip-top-start"
                                                                                              title="Indicate Food was Delivered"
                                                                                              placement="top"
                                                                                              classes={{ tooltip: classes.tooltip }}
                                                                                            >
                                                                                              <FoodReceivedButton value={actions[value]}/>
                                                                                            </Tooltip>
                                                                                          </TableCell>

                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            )
     }
     else{
     return (
        <Table className={classes.table}>
                        <TableBody>
                          {tasksIndexes.map(value => (
                            <TableRow key={value} className={classes.tableRow}>
                              <TableCell className={tableCellClasses}>{tasks[value]}</TableCell>
                              <TableCell className={tableCellClasses}><div/></TableCell>
                              <TableCell className={tableCellClasses}><div/></TableCell>
                              <TableCell className={tableCellClasses}><div/></TableCell>
                              <TableCell className={tableCellClasses}><div/></TableCell>
                              <TableCell className={tableCellClasses}><div/></TableCell>
                                          <TableCell className={tableCellClasses}><div/></TableCell>
                                          <TableCell className={tableCellClasses}><div/></TableCell>
                                          <TableCell className={tableCellClasses}><div/></TableCell>
                                          <TableCell className={tableCellClasses}><div/></TableCell>
                                                      <TableCell className={tableCellClasses}><div/></TableCell>
                                                      <TableCell className={tableCellClasses}><div/></TableCell>
                                                      <TableCell className={tableCellClasses}><div/></TableCell>
                                                      <TableCell className={tableCellClasses}><div/></TableCell>
                                                                  <TableCell className={tableCellClasses}><div/></TableCell>
                                                                  <TableCell className={tableCellClasses}><div/></TableCell>
                                                                  <TableCell className={tableCellClasses}><div/></TableCell>
                                                                  <TableCell className={tableCellClasses}><div/></TableCell>
                                                                              <TableCell className={tableCellClasses}><div/></TableCell>
                                                                              <TableCell className={tableCellClasses}><div/></TableCell>
                                                                              <TableCell className={tableCellClasses}><div/></TableCell>
                                                                              <TableCell className={tableCellClasses}><div/></TableCell>



                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    )
     }
}

function notifyFoodDelivery(tx)
    {
             const payload = tx.value;
             //alert(JSON.stringify(payload));

             const apiUrl = window.location.protocol +"//"+window.location.hostname+"/activeNetwork/notifyDelivery/";
                      axios.post(apiUrl,payload).then((response) => {
                            console.log(JSON.stringify(response.data));
                            reRenderMyData();
              }).catch(err => {
               //TODO
               console.log(JSON.stringify(err));
              });
    }

function reRenderMyData(){
            const orgId = store.getState().sourceOrg.orgId;
            //const orgId = "church";
            const apiUrl = window.location.protocol +"//"+window.location.hostname+"/tx/dropoff/?orgId="+orgId;
            axios.get(apiUrl).then((response) => {
                //console.log("MY_DATA: "+JSON.stringify(response.data));
                ReactDOM.unmountComponentAtNode(document.getElementById('inProgress'));
                ReactDOM.render(ReRender(response.data),document.getElementById('inProgress'));
                //setState({data: response.data});
            });
}

function FoodReceivedButton(tx)
    {
        return(
            <>
                <div className="progress-group-prepend">
                    <span className="progress-group-text">
                        <CButton color="success" onClick={(e) => notifyFoodDelivery(tx)}>Food Received</CButton>
                    </span>
                </div>
            </>
        );
    }

const WaitOnData = ({state}) => {
    //console.log("*****************WAIT_ON_DATA*****************");


    if (state.data === null) {
      return <p>Loading...</p>;
    }

    const inProgress = state.data.pending;
    var array = [];
    var tasksIndexes = [];
    for (const [index, value] of inProgress.entries()) {
        const org = value.pickupNotification.sourceOrg.orgName;
        array.push(org);
        tasksIndexes.push(index);
    }

    const history = state.data.history;
    var historyArray = [];
    var historyIndexes = [];
    for (const [index, value] of history.entries()) {
        const org = value.pickupNotification.sourceOrg.orgName;
        historyArray.push(org);
        historyIndexes.push(index);
    }
    return (
      <>
                <br/><br/><br/><br/>
                <CRow>
                <CCol>
                <CCardGroup className="mb-4">
                       <CWidgetDropdown
                                 color="gradient-primary"
                                 header={state.data.pending.length}
                                 text="Deliveries In-Progress"
                                 footerSlot={
                                   <ChartLineSimple
                                     pointed
                                     className="c-chart-wrapper mt-3 mx-3"
                                     style={{height: '70px'}}
                                     dataPoints={[65, 59, 84, 84, 51, 55, 40]}
                                     pointHoverBackgroundColor="primary"
                                     label="Members"
                                     labels="months"
                                   />
                                 }
                               >
                           </CWidgetDropdown>
                </CCardGroup>
                </CCol>
                </CRow>
                <CRow>
                    <CCol>
                        <GridContainer>
                                                     <GridItem xs={12} sm={12} md={6}>
                                                       <CustomTabs
                                                         title="Delivery Status"
                                                         headerColor="primary"
                                                         tabs={[
                                                           {
                                                             tabName: "In-Progress",
                                                             tabIcon: BugReport,
                                                             tabContent: (
                                                               <DropOffTasks
                                                                 checkedIndexes={[0]}
                                                                 tasksIndexes={tasksIndexes}
                                                                 tasks={array}
                                                                 actions={inProgress}
                                                               />
                                                             )
                                                           },
                                                           {
                                                            tabName: "History",
                                                            tabIcon: BugReport,
                                                            tabContent: (
                                                              <DropOffTasks
                                                                checkedIndexes={[0]}
                                                                tasksIndexes={historyIndexes}
                                                                tasks={historyArray}
                                                                actions={[]}
                                                              />
                                                            )
                                                          },
                                                         ]}
                                                       />
                                                     </GridItem>
                                                 </GridContainer>
                    </CCol>
                </CRow>
                </>
    )
}

function ReRender(txs){
    console.log("*****************RERENDER*****************: ");

    const inProgress = txs.pending;
    console.log("IN_PROGRESSS: "+txs.pending.length);
    var array = [];
    var tasksIndexes = [];
    for (const [index, value] of inProgress.entries()) {
        const org = value.pickupNotification.sourceOrg.orgName;
        array.push(org);
        tasksIndexes.push(index);
    }

    const history = txs.history;
    console.log("HISTORY: "+txs.history.length);
    var historyArray = [];
    var historyIndexes = [];
    for (const [index, value] of history.entries()) {
        const org = value.pickupNotification.sourceOrg.orgName;
        historyArray.push(org);
        historyIndexes.push(index);
    }
        return (
          <>
                    <br/><br/><br/><br/>
                    <CRow>
                    <CCol>
                    <CCardGroup className="mb-4">
                           <CWidgetDropdown
                                     color="gradient-primary"
                                     header={txs.pending.length}
                                     text="Deliveries In-Progress"
                                     footerSlot={
                                       <ChartLineSimple
                                         pointed
                                         className="c-chart-wrapper mt-3 mx-3"
                                         style={{height: '70px'}}
                                         dataPoints={[65, 59, 84, 84, 51, 55, 40]}
                                         pointHoverBackgroundColor="primary"
                                         label="Members"
                                         labels="months"
                                       />
                                     }
                                   >
                               </CWidgetDropdown>
                    </CCardGroup>
                    </CCol>
                    </CRow>
                    <CRow>
                        <CCol>
                            <GridContainer>
                                                         <GridItem xs={12} sm={12} md={6}>
                                                           <CustomTabs
                                                             title="Delivery Status"
                                                             headerColor="primary"
                                                             tabs={[
                                                               {
                                                                 tabName: "In-Progress",
                                                                 tabIcon: BugReport,
                                                                 tabContent: (
                                                                   <DropOffTasks
                                                                     checkedIndexes={[0]}
                                                                     tasksIndexes={tasksIndexes}
                                                                     tasks={array}
                                                                     actions={inProgress}
                                                                   />
                                                                 )
                                                               },
                                                               {
                                                                tabName: "History",
                                                                tabIcon: BugReport,
                                                                tabContent: (
                                                                  <DropOffTasks
                                                                    checkedIndexes={[0]}
                                                                    tasksIndexes={historyIndexes}
                                                                    tasks={historyArray}
                                                                    actions={[]}
                                                                  />
                                                                )
                                                              },
                                                             ]}
                                                           />
                                                         </GridItem>
                                                     </GridContainer>
                        </CCol>
                    </CRow>
         </>
    )
}



class DropOffHome extends React.Component {
  constructor(props) {
      super(props);
      this.state = {data: null};
      this.renderMyData();
  }

  renderMyData(){
        const orgId = store.getState().sourceOrg.orgId;
        //const orgId = "church";
        const apiUrl = window.location.protocol +"//"+window.location.hostname+"/tx/dropoff/?orgId="+orgId;
        axios.get(apiUrl).then((response) => {
            //console.log("MY_DATA: "+JSON.stringify(response.data));
            this.setState({data: response.data});
        });
  }

  render() {
      return (
            <>
            <div id="inProgress">
                  <WaitOnData state={this.state}/>
            </div>
            </>
      );
  }
}

export default withRouter(DropOffHome)

START: 1621057147
 START: 1621143604

 {orgMap.map((prop, key) => {
                       return (
                         <option value={key}>{prop}</option>
                       );
               })}


               function dropDownComp(state,orgs) {
                     let map = new Map()
                     for (const [index, value] of orgs.entries()) {
                          map.set(value.orgId,value.orgName);
                     }
                     const options = [];
                     for (let [key, value] of map) {
                       options.push(<option value={key}>{value}</option>);
                     }

                     return (
                       <div id="orgInput">
                           <CSelect custom name="sourceOrgId" onChange={(event)=>{
                               if (event.target.value === "custom") {
                                   inputFieldComp(state);
                               }
                               else
                               {
                                  const target = event.target;
                                  const value = target.value;
                                  const name = target.name;
                                  state.sourceOrgId = value;
                               }
                           }}>
                             <option value="0">--Select Organization--</option>
                           </CSelect>
                       </div>
                     );
               }