plugins {
    id 'application'
    id 'io.quarkus' version '1.7.0.Final'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java'
}

repositories {
    mavenCentral()
    google()
    maven {
        url "http://download.java.net/maven/2/"
    }
    maven {
        url "http://download.osgeo.org/webdav/geotools/"
    }
    maven {
        url "http://repo.boundlessgeo.com/main/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
    flatDir {
        dirs 'third-party-libs'
    }
}


dependencies {
    implementation enforcedPlatform('io.quarkus:quarkus-bom:1.7.0.Final')
    implementation 'io.quarkus:quarkus-resteasy:1.7.0.Final'

    implementation 'com.google.code.gson:gson:2.8.6'

    implementation 'org.mongodb:mongodb-driver-sync:4.0.3'
    implementation 'org.mongodb:mongodb-driver:3.0.4'

    implementation 'org.apache.kafka:kafka-clients:2.4.0'
    implementation 'org.springframework.kafka:spring-kafka:2.4.1.RELEASE'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.2'

    implementation 'io.delta:delta-core_2.11:0.5.0'
    implementation 'org.apache.spark:spark-core_2.12:2.4.5'
    implementation 'org.apache.spark:spark-sql_2.12:2.4.5'

    implementation 'org.locationtech.jts:jts-core:1.16.1'
    implementation 'org.locationtech.spatial4j:spatial4j:0.7'

    implementation name: 'jai_imageio-1.1'

    implementation 'org.springframework:spring-web:5.2.1.RELEASE'

    implementation name: 'machineLearningPipelinePrototype'

    testImplementation enforcedPlatform('io.quarkus:quarkus-bom:1.7.0.Final')
    testImplementation 'io.quarkus:quarkus-junit5:1.7.0.Final'
    testImplementation 'io.rest-assured:rest-assured:4.3.0'
}

test {
    useJUnitPlatform()
    filter {
        //include specific method in any of the tests
        includeTestsMatching "*Tests"
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

quarkusBuild {
    nativeArgs {
        containerBuild = true
        buildImage = "quay.io/quarkus/ubi-quarkus-native-image:20.1.0-java11"
    }
}